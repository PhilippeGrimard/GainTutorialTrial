//Below is from the PluginProcessor.cpp
/*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
GainplugintrialAudioProcessor::GainplugintrialAudioProcessor()
#ifndef JucePlugin_PreferredChannelConfigurations
     : AudioProcessor (BusesProperties()
                     #if ! JucePlugin_IsMidiEffect
                      #if ! JucePlugin_IsSynth
                       .withInput  ("Input",  AudioChannelSet::stereo(), true)
                      #endif
                       .withOutput ("Output", AudioChannelSet::stereo(), true)
                     #endif
                       )
#endif
{
}

GainplugintrialAudioProcessor::~GainplugintrialAudioProcessor()
{
}

//==============================================================================
const String GainplugintrialAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool GainplugintrialAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool GainplugintrialAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool GainplugintrialAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double GainplugintrialAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int GainplugintrialAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int GainplugintrialAudioProcessor::getCurrentProgram()
{
    return 0;
}

void GainplugintrialAudioProcessor::setCurrentProgram (int index)
{
}

const String GainplugintrialAudioProcessor::getProgramName (int index)
{
    return {};
}

void GainplugintrialAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void GainplugintrialAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void GainplugintrialAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool GainplugintrialAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    if (layouts.getMainOutputChannelSet() != AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void GainplugintrialAudioProcessor::processBlock (AudioBuffer<float>& buffer, MidiBuffer& midiMessages)
{   //Wherethe gain processing is done
    
    ScopedNoDenormals noDenormals;
    auto totalNumInputChannels  = getTotalNumInputChannels();
    auto totalNumOutputChannels = getTotalNumOutputChannels();

    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (auto i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    // Make sure to reset the state if your inner loop is processing
    // the samples and the outer loop is handling the channels.
    // Alternatively, you can process the samples with the channels
    // interleaved by keeping the same state.
    for (int channel = 0; channel < totalNumInputChannels; ++channel)
    {
        auto* channelData = buffer.getWritePointer (channel);

        // ..do something to the data...
    }
}

//==============================================================================
bool GainplugintrialAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* GainplugintrialAudioProcessor::createEditor()
{
    return new GainplugintrialAudioProcessorEditor (*this);
}

//==============================================================================
void GainplugintrialAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void GainplugintrialAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new GainplugintrialAudioProcessor();
}

  //Below is PluginProcessor.h
  /*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>

//==============================================================================
/**
*/
class GainplugintrialAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    GainplugintrialAudioProcessor();
    ~GainplugintrialAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

   #ifndef JucePlugin_PreferredChannelConfigurations
    bool isBusesLayoutSupported (const BusesLayout& layouts) const override;
   #endif

    void processBlock (AudioBuffer<float>&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool isMidiEffect() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GainplugintrialAudioProcessor)
};

  //Below is from Plugin Editor.cpp
  
  /*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin editor.
 //This is what the user sees/ What he can adjust

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
GainplugintrialAudioProcessorEditor::GainplugintrialAudioProcessorEditor (GainplugintrialAudioProcessor& p)
    : AudioProcessorEditor (&p), processor(p)
{
    
    mGainSlider.setSliderStyle (Slider::SliderStyle::LinearVertical);
        //LinearVertical is one of the SliderStyle within the Slider class
    mGainSlider.setRange(0.0f, 1.0f,0.01f);
        //first argument [0.0f] is initial minimum value of 0.0 where f denotes float value
        //second argument [1.0f] is initial maximum value of 0.0 where f denotes float value
        //Third argument [0.01f] is increment value of 0.01 where f denotes float value
    mGainSlider.setValue (0.5f);
    addAndMakeVisible(mGainSlider);
        //addAndMakeVisible denotes that the child component [mGainSlider] is contained by the parent of the Processor
    
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (200, 300);
}

GainplugintrialAudioProcessorEditor::~GainplugintrialAudioProcessorEditor()
{
}

//==============================================================================
void GainplugintrialAudioProcessorEditor::paint (Graphics& g)
{
    // (Our component is opaque, so we must completely fill the background with a solid colour)
    g.fillAll(Colours::black);
}

void GainplugintrialAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    mGainSlider.setBounds(getWidth()/2-50, getHeight()/2-75 , 100, 150 );
    
}

  //Below is from Plugin Editor.h
 /*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin editor.
 This is where we declare our objects

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>
#include "PluginProcessor.h"

//==============================================================================
/**
*/
class GainplugintrialAudioProcessorEditor  : public AudioProcessorEditor
{
public:
    GainplugintrialAudioProcessorEditor (GainplugintrialAudioProcessor&);
    ~GainplugintrialAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;

private:
    // This reference is provided as a quick way for your editor to
    // access the processor object that created it.
    
    Slider mGainSlider; //prefix m denote member variables
    
    GainplugintrialAudioProcessor& processor;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GainplugintrialAudioProcessorEditor)
};








// Main .Jucer file

<?xml version="1.0" encoding="UTF-8"?>

<JUCERPROJECT id="WcVjKB" name="Gainplugintrial" projectType="audioplug" jucerVersion="5.4.7"
              pluginFormats="buildAU">
  <MAINGROUP id="h3kNDs" name="Gainplugintrial">
    <GROUP id="{B24992FF-C206-9715-3042-0F0D1D5DF290}" name="Source">
      <FILE id="KKzE37" name="PluginProcessor.cpp" compile="1" resource="0"
            file="Source/PluginProcessor.cpp"/>
      <FILE id="y6vtnv" name="PluginProcessor.h" compile="0" resource="0"
            file="Source/PluginProcessor.h"/>
      <FILE id="TLkbcC" name="PluginEditor.cpp" compile="1" resource="0"
            file="Source/PluginEditor.cpp"/>
      <FILE id="iGD0UL" name="PluginEditor.h" compile="0" resource="0" file="Source/PluginEditor.h"/>
    </GROUP>
  </MAINGROUP>
  <EXPORTFORMATS>
    <XCODE_MAC targetFolder="Builds/MacOSX">
      <CONFIGURATIONS>
        <CONFIGURATION isDebug="1" name="Debug"/>
        <CONFIGURATION isDebug="0" name="Release"/>
      </CONFIGURATIONS>
      <MODULEPATHS>
        <MODULEPATH id="juce_audio_basics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_devices" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_formats" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_plugin_client" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_processors" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_utils" path="../JUCE/modules"/>
        <MODULEPATH id="juce_core" path="../JUCE/modules"/>
        <MODULEPATH id="juce_cryptography" path="../JUCE/modules"/>
        <MODULEPATH id="juce_data_structures" path="../JUCE/modules"/>
        <MODULEPATH id="juce_events" path="../JUCE/modules"/>
        <MODULEPATH id="juce_graphics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_gui_basics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_gui_extra" path="../JUCE/modules"/>
        <MODULEPATH id="juce_opengl" path="../JUCE/modules"/>
      </MODULEPATHS>
    </XCODE_MAC>
    <XCODE_IPHONE targetFolder="Builds/iOS">
      <CONFIGURATIONS>
        <CONFIGURATION isDebug="1" name="Debug"/>
        <CONFIGURATION isDebug="0" name="Release"/>
      </CONFIGURATIONS>
      <MODULEPATHS>
        <MODULEPATH id="juce_audio_basics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_devices" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_formats" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_plugin_client" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_processors" path="../JUCE/modules"/>
        <MODULEPATH id="juce_audio_utils" path="../JUCE/modules"/>
        <MODULEPATH id="juce_core" path="../JUCE/modules"/>
        <MODULEPATH id="juce_cryptography" path="../JUCE/modules"/>
        <MODULEPATH id="juce_data_structures" path="../JUCE/modules"/>
        <MODULEPATH id="juce_events" path="../JUCE/modules"/>
        <MODULEPATH id="juce_graphics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_gui_basics" path="../JUCE/modules"/>
        <MODULEPATH id="juce_gui_extra" path="../JUCE/modules"/>
        <MODULEPATH id="juce_opengl" path="../JUCE/modules"/>
      </MODULEPATHS>
    </XCODE_IPHONE>
  </EXPORTFORMATS>
  <MODULES>
    <MODULE id="juce_audio_basics" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_audio_devices" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_audio_formats" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_audio_plugin_client" showAllCode="1" useLocalCopy="0"
            useGlobalPath="1"/>
    <MODULE id="juce_audio_processors" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_audio_utils" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_core" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_cryptography" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_data_structures" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_events" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_graphics" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_gui_basics" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_gui_extra" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
    <MODULE id="juce_opengl" showAllCode="1" useLocalCopy="0" useGlobalPath="1"/>
  </MODULES>
  <LIVE_SETTINGS>
    <OSX/>
  </LIVE_SETTINGS>
  <JUCEOPTIONS JUCE_VST3_CAN_REPLACE_VST2="0" JUCE_STRICT_REFCOUNTEDPOINTER="1"/>
</JUCERPROJECT>
